
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model paciente
 * 
 */
export type paciente = $Result.DefaultSelection<Prisma.$pacientePayload>
/**
 * Model tipo_de_examen
 * 
 */
export type tipo_de_examen = $Result.DefaultSelection<Prisma.$tipo_de_examenPayload>
/**
 * Model resultado
 * 
 */
export type resultado = $Result.DefaultSelection<Prisma.$resultadoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Pacientes
 * const pacientes = await prisma.paciente.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Pacientes
   * const pacientes = await prisma.paciente.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.paciente`: Exposes CRUD operations for the **paciente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pacientes
    * const pacientes = await prisma.paciente.findMany()
    * ```
    */
  get paciente(): Prisma.pacienteDelegate<ExtArgs>;

  /**
   * `prisma.tipo_de_examen`: Exposes CRUD operations for the **tipo_de_examen** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tipo_de_examen
    * const tipo_de_examen = await prisma.tipo_de_examen.findMany()
    * ```
    */
  get tipo_de_examen(): Prisma.tipo_de_examenDelegate<ExtArgs>;

  /**
   * `prisma.resultado`: Exposes CRUD operations for the **resultado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Resultados
    * const resultados = await prisma.resultado.findMany()
    * ```
    */
  get resultado(): Prisma.resultadoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    paciente: 'paciente',
    tipo_de_examen: 'tipo_de_examen',
    resultado: 'resultado'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'paciente' | 'tipo_de_examen' | 'resultado'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      paciente: {
        payload: Prisma.$pacientePayload<ExtArgs>
        fields: Prisma.pacienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.pacienteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pacientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pacienteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pacientePayload>
          }
          findFirst: {
            args: Prisma.pacienteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pacientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pacienteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pacientePayload>
          }
          findMany: {
            args: Prisma.pacienteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pacientePayload>[]
          }
          create: {
            args: Prisma.pacienteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pacientePayload>
          }
          createMany: {
            args: Prisma.pacienteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.pacienteCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pacientePayload>[]
          }
          delete: {
            args: Prisma.pacienteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pacientePayload>
          }
          update: {
            args: Prisma.pacienteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pacientePayload>
          }
          deleteMany: {
            args: Prisma.pacienteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.pacienteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.pacienteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$pacientePayload>
          }
          aggregate: {
            args: Prisma.PacienteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePaciente>
          }
          groupBy: {
            args: Prisma.pacienteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PacienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.pacienteCountArgs<ExtArgs>,
            result: $Utils.Optional<PacienteCountAggregateOutputType> | number
          }
        }
      }
      tipo_de_examen: {
        payload: Prisma.$tipo_de_examenPayload<ExtArgs>
        fields: Prisma.tipo_de_examenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tipo_de_examenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipo_de_examenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tipo_de_examenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipo_de_examenPayload>
          }
          findFirst: {
            args: Prisma.tipo_de_examenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipo_de_examenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tipo_de_examenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipo_de_examenPayload>
          }
          findMany: {
            args: Prisma.tipo_de_examenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipo_de_examenPayload>[]
          }
          create: {
            args: Prisma.tipo_de_examenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipo_de_examenPayload>
          }
          createMany: {
            args: Prisma.tipo_de_examenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.tipo_de_examenCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipo_de_examenPayload>[]
          }
          delete: {
            args: Prisma.tipo_de_examenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipo_de_examenPayload>
          }
          update: {
            args: Prisma.tipo_de_examenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipo_de_examenPayload>
          }
          deleteMany: {
            args: Prisma.tipo_de_examenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.tipo_de_examenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.tipo_de_examenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tipo_de_examenPayload>
          }
          aggregate: {
            args: Prisma.Tipo_de_examenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTipo_de_examen>
          }
          groupBy: {
            args: Prisma.tipo_de_examenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Tipo_de_examenGroupByOutputType>[]
          }
          count: {
            args: Prisma.tipo_de_examenCountArgs<ExtArgs>,
            result: $Utils.Optional<Tipo_de_examenCountAggregateOutputType> | number
          }
        }
      }
      resultado: {
        payload: Prisma.$resultadoPayload<ExtArgs>
        fields: Prisma.resultadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.resultadoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.resultadoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultadoPayload>
          }
          findFirst: {
            args: Prisma.resultadoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.resultadoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultadoPayload>
          }
          findMany: {
            args: Prisma.resultadoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultadoPayload>[]
          }
          create: {
            args: Prisma.resultadoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultadoPayload>
          }
          createMany: {
            args: Prisma.resultadoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.resultadoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultadoPayload>[]
          }
          delete: {
            args: Prisma.resultadoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultadoPayload>
          }
          update: {
            args: Prisma.resultadoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultadoPayload>
          }
          deleteMany: {
            args: Prisma.resultadoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.resultadoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.resultadoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$resultadoPayload>
          }
          aggregate: {
            args: Prisma.ResultadoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResultado>
          }
          groupBy: {
            args: Prisma.resultadoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResultadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.resultadoCountArgs<ExtArgs>,
            result: $Utils.Optional<ResultadoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PacienteCountOutputType
   */

  export type PacienteCountOutputType = {
    resultado: number
  }

  export type PacienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resultado?: boolean | PacienteCountOutputTypeCountResultadoArgs
  }

  // Custom InputTypes
  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PacienteCountOutputType
     */
    select?: PacienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeCountResultadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: resultadoWhereInput
  }


  /**
   * Count Type Tipo_de_examenCountOutputType
   */

  export type Tipo_de_examenCountOutputType = {
    resultado: number
  }

  export type Tipo_de_examenCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resultado?: boolean | Tipo_de_examenCountOutputTypeCountResultadoArgs
  }

  // Custom InputTypes
  /**
   * Tipo_de_examenCountOutputType without action
   */
  export type Tipo_de_examenCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tipo_de_examenCountOutputType
     */
    select?: Tipo_de_examenCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Tipo_de_examenCountOutputType without action
   */
  export type Tipo_de_examenCountOutputTypeCountResultadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: resultadoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model paciente
   */

  export type AggregatePaciente = {
    _count: PacienteCountAggregateOutputType | null
    _avg: PacienteAvgAggregateOutputType | null
    _sum: PacienteSumAggregateOutputType | null
    _min: PacienteMinAggregateOutputType | null
    _max: PacienteMaxAggregateOutputType | null
  }

  export type PacienteAvgAggregateOutputType = {
    id_paciente: number | null
    CI_paciente: number | null
  }

  export type PacienteSumAggregateOutputType = {
    id_paciente: number | null
    CI_paciente: number | null
  }

  export type PacienteMinAggregateOutputType = {
    id_paciente: number | null
    nombre: string | null
    CI_paciente: number | null
  }

  export type PacienteMaxAggregateOutputType = {
    id_paciente: number | null
    nombre: string | null
    CI_paciente: number | null
  }

  export type PacienteCountAggregateOutputType = {
    id_paciente: number
    nombre: number
    CI_paciente: number
    _all: number
  }


  export type PacienteAvgAggregateInputType = {
    id_paciente?: true
    CI_paciente?: true
  }

  export type PacienteSumAggregateInputType = {
    id_paciente?: true
    CI_paciente?: true
  }

  export type PacienteMinAggregateInputType = {
    id_paciente?: true
    nombre?: true
    CI_paciente?: true
  }

  export type PacienteMaxAggregateInputType = {
    id_paciente?: true
    nombre?: true
    CI_paciente?: true
  }

  export type PacienteCountAggregateInputType = {
    id_paciente?: true
    nombre?: true
    CI_paciente?: true
    _all?: true
  }

  export type PacienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which paciente to aggregate.
     */
    where?: pacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pacientes to fetch.
     */
    orderBy?: pacienteOrderByWithRelationInput | pacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pacientes
    **/
    _count?: true | PacienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PacienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PacienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PacienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PacienteMaxAggregateInputType
  }

  export type GetPacienteAggregateType<T extends PacienteAggregateArgs> = {
        [P in keyof T & keyof AggregatePaciente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaciente[P]>
      : GetScalarType<T[P], AggregatePaciente[P]>
  }




  export type pacienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pacienteWhereInput
    orderBy?: pacienteOrderByWithAggregationInput | pacienteOrderByWithAggregationInput[]
    by: PacienteScalarFieldEnum[] | PacienteScalarFieldEnum
    having?: pacienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PacienteCountAggregateInputType | true
    _avg?: PacienteAvgAggregateInputType
    _sum?: PacienteSumAggregateInputType
    _min?: PacienteMinAggregateInputType
    _max?: PacienteMaxAggregateInputType
  }

  export type PacienteGroupByOutputType = {
    id_paciente: number
    nombre: string
    CI_paciente: number
    _count: PacienteCountAggregateOutputType | null
    _avg: PacienteAvgAggregateOutputType | null
    _sum: PacienteSumAggregateOutputType | null
    _min: PacienteMinAggregateOutputType | null
    _max: PacienteMaxAggregateOutputType | null
  }

  type GetPacienteGroupByPayload<T extends pacienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PacienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PacienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PacienteGroupByOutputType[P]>
            : GetScalarType<T[P], PacienteGroupByOutputType[P]>
        }
      >
    >


  export type pacienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_paciente?: boolean
    nombre?: boolean
    CI_paciente?: boolean
    resultado?: boolean | paciente$resultadoArgs<ExtArgs>
    _count?: boolean | PacienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paciente"]>

  export type pacienteSelectScalar = {
    id_paciente?: boolean
    nombre?: boolean
    CI_paciente?: boolean
  }


  export type pacienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resultado?: boolean | paciente$resultadoArgs<ExtArgs>
    _count?: boolean | PacienteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $pacientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "paciente"
    objects: {
      resultado: Prisma.$resultadoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_paciente: number
      nombre: string
      CI_paciente: number
    }, ExtArgs["result"]["paciente"]>
    composites: {}
  }


  type pacienteGetPayload<S extends boolean | null | undefined | pacienteDefaultArgs> = $Result.GetResult<Prisma.$pacientePayload, S>

  type pacienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<pacienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PacienteCountAggregateInputType | true
    }

  export interface pacienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['paciente'], meta: { name: 'paciente' } }
    /**
     * Find zero or one Paciente that matches the filter.
     * @param {pacienteFindUniqueArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pacienteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, pacienteFindUniqueArgs<ExtArgs>>
    ): Prisma__pacienteClient<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Paciente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {pacienteFindUniqueOrThrowArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends pacienteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, pacienteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__pacienteClient<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Paciente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pacienteFindFirstArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pacienteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, pacienteFindFirstArgs<ExtArgs>>
    ): Prisma__pacienteClient<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Paciente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pacienteFindFirstOrThrowArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends pacienteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, pacienteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__pacienteClient<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pacientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pacienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pacientes
     * const pacientes = await prisma.paciente.findMany()
     * 
     * // Get first 10 Pacientes
     * const pacientes = await prisma.paciente.findMany({ take: 10 })
     * 
     * // Only select the `id_paciente`
     * const pacienteWithId_pacienteOnly = await prisma.paciente.findMany({ select: { id_paciente: true } })
     * 
    **/
    findMany<T extends pacienteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pacienteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Paciente.
     * @param {pacienteCreateArgs} args - Arguments to create a Paciente.
     * @example
     * // Create one Paciente
     * const Paciente = await prisma.paciente.create({
     *   data: {
     *     // ... data to create a Paciente
     *   }
     * })
     * 
    **/
    create<T extends pacienteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, pacienteCreateArgs<ExtArgs>>
    ): Prisma__pacienteClient<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pacientes.
     * @param {pacienteCreateManyArgs} args - Arguments to create many Pacientes.
     * @example
     * // Create many Pacientes
     * const paciente = await prisma.paciente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends pacienteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pacienteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pacientes and returns the data saved in the database.
     * @param {pacienteCreateManyAndReturnArgs} args - Arguments to create many Pacientes.
     * @example
     * // Create many Pacientes
     * const paciente = await prisma.paciente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pacientes and only return the `id_paciente`
     * const pacienteWithId_pacienteOnly = await prisma.paciente.createManyAndReturn({ 
     *   select: { id_paciente: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends pacienteCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, pacienteCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Paciente.
     * @param {pacienteDeleteArgs} args - Arguments to delete one Paciente.
     * @example
     * // Delete one Paciente
     * const Paciente = await prisma.paciente.delete({
     *   where: {
     *     // ... filter to delete one Paciente
     *   }
     * })
     * 
    **/
    delete<T extends pacienteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, pacienteDeleteArgs<ExtArgs>>
    ): Prisma__pacienteClient<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Paciente.
     * @param {pacienteUpdateArgs} args - Arguments to update one Paciente.
     * @example
     * // Update one Paciente
     * const paciente = await prisma.paciente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pacienteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, pacienteUpdateArgs<ExtArgs>>
    ): Prisma__pacienteClient<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pacientes.
     * @param {pacienteDeleteManyArgs} args - Arguments to filter Pacientes to delete.
     * @example
     * // Delete a few Pacientes
     * const { count } = await prisma.paciente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pacienteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pacienteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pacienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pacientes
     * const paciente = await prisma.paciente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pacienteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, pacienteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paciente.
     * @param {pacienteUpsertArgs} args - Arguments to update or create a Paciente.
     * @example
     * // Update or create a Paciente
     * const paciente = await prisma.paciente.upsert({
     *   create: {
     *     // ... data to create a Paciente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paciente we want to update
     *   }
     * })
    **/
    upsert<T extends pacienteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, pacienteUpsertArgs<ExtArgs>>
    ): Prisma__pacienteClient<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pacienteCountArgs} args - Arguments to filter Pacientes to count.
     * @example
     * // Count the number of Pacientes
     * const count = await prisma.paciente.count({
     *   where: {
     *     // ... the filter for the Pacientes we want to count
     *   }
     * })
    **/
    count<T extends pacienteCountArgs>(
      args?: Subset<T, pacienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PacienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paciente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PacienteAggregateArgs>(args: Subset<T, PacienteAggregateArgs>): Prisma.PrismaPromise<GetPacienteAggregateType<T>>

    /**
     * Group by Paciente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pacienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends pacienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: pacienteGroupByArgs['orderBy'] }
        : { orderBy?: pacienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, pacienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPacienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the paciente model
   */
  readonly fields: pacienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for paciente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__pacienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    resultado<T extends paciente$resultadoArgs<ExtArgs> = {}>(args?: Subset<T, paciente$resultadoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the paciente model
   */ 
  interface pacienteFieldRefs {
    readonly id_paciente: FieldRef<"paciente", 'Int'>
    readonly nombre: FieldRef<"paciente", 'String'>
    readonly CI_paciente: FieldRef<"paciente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * paciente findUnique
   */
  export type pacienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
    /**
     * Filter, which paciente to fetch.
     */
    where: pacienteWhereUniqueInput
  }

  /**
   * paciente findUniqueOrThrow
   */
  export type pacienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
    /**
     * Filter, which paciente to fetch.
     */
    where: pacienteWhereUniqueInput
  }

  /**
   * paciente findFirst
   */
  export type pacienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
    /**
     * Filter, which paciente to fetch.
     */
    where?: pacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pacientes to fetch.
     */
    orderBy?: pacienteOrderByWithRelationInput | pacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pacientes.
     */
    cursor?: pacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pacientes.
     */
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * paciente findFirstOrThrow
   */
  export type pacienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
    /**
     * Filter, which paciente to fetch.
     */
    where?: pacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pacientes to fetch.
     */
    orderBy?: pacienteOrderByWithRelationInput | pacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pacientes.
     */
    cursor?: pacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pacientes.
     */
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * paciente findMany
   */
  export type pacienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
    /**
     * Filter, which pacientes to fetch.
     */
    where?: pacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pacientes to fetch.
     */
    orderBy?: pacienteOrderByWithRelationInput | pacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pacientes.
     */
    cursor?: pacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pacientes.
     */
    skip?: number
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * paciente create
   */
  export type pacienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
    /**
     * The data needed to create a paciente.
     */
    data: XOR<pacienteCreateInput, pacienteUncheckedCreateInput>
  }

  /**
   * paciente createMany
   */
  export type pacienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pacientes.
     */
    data: pacienteCreateManyInput | pacienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * paciente createManyAndReturn
   */
  export type pacienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
    /**
     * The data used to create many pacientes.
     */
    data: pacienteCreateManyInput | pacienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * paciente update
   */
  export type pacienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
    /**
     * The data needed to update a paciente.
     */
    data: XOR<pacienteUpdateInput, pacienteUncheckedUpdateInput>
    /**
     * Choose, which paciente to update.
     */
    where: pacienteWhereUniqueInput
  }

  /**
   * paciente updateMany
   */
  export type pacienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pacientes.
     */
    data: XOR<pacienteUpdateManyMutationInput, pacienteUncheckedUpdateManyInput>
    /**
     * Filter which pacientes to update
     */
    where?: pacienteWhereInput
  }

  /**
   * paciente upsert
   */
  export type pacienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
    /**
     * The filter to search for the paciente to update in case it exists.
     */
    where: pacienteWhereUniqueInput
    /**
     * In case the paciente found by the `where` argument doesn't exist, create a new paciente with this data.
     */
    create: XOR<pacienteCreateInput, pacienteUncheckedCreateInput>
    /**
     * In case the paciente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pacienteUpdateInput, pacienteUncheckedUpdateInput>
  }

  /**
   * paciente delete
   */
  export type pacienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
    /**
     * Filter which paciente to delete.
     */
    where: pacienteWhereUniqueInput
  }

  /**
   * paciente deleteMany
   */
  export type pacienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pacientes to delete
     */
    where?: pacienteWhereInput
  }

  /**
   * paciente.resultado
   */
  export type paciente$resultadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    where?: resultadoWhereInput
    orderBy?: resultadoOrderByWithRelationInput | resultadoOrderByWithRelationInput[]
    cursor?: resultadoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResultadoScalarFieldEnum | ResultadoScalarFieldEnum[]
  }

  /**
   * paciente without action
   */
  export type pacienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paciente
     */
    select?: pacienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pacienteInclude<ExtArgs> | null
  }


  /**
   * Model tipo_de_examen
   */

  export type AggregateTipo_de_examen = {
    _count: Tipo_de_examenCountAggregateOutputType | null
    _avg: Tipo_de_examenAvgAggregateOutputType | null
    _sum: Tipo_de_examenSumAggregateOutputType | null
    _min: Tipo_de_examenMinAggregateOutputType | null
    _max: Tipo_de_examenMaxAggregateOutputType | null
  }

  export type Tipo_de_examenAvgAggregateOutputType = {
    id_examen: number | null
  }

  export type Tipo_de_examenSumAggregateOutputType = {
    id_examen: number | null
  }

  export type Tipo_de_examenMinAggregateOutputType = {
    id_examen: number | null
    Descripcion: string | null
    Indicaciones: string | null
  }

  export type Tipo_de_examenMaxAggregateOutputType = {
    id_examen: number | null
    Descripcion: string | null
    Indicaciones: string | null
  }

  export type Tipo_de_examenCountAggregateOutputType = {
    id_examen: number
    Descripcion: number
    Indicaciones: number
    _all: number
  }


  export type Tipo_de_examenAvgAggregateInputType = {
    id_examen?: true
  }

  export type Tipo_de_examenSumAggregateInputType = {
    id_examen?: true
  }

  export type Tipo_de_examenMinAggregateInputType = {
    id_examen?: true
    Descripcion?: true
    Indicaciones?: true
  }

  export type Tipo_de_examenMaxAggregateInputType = {
    id_examen?: true
    Descripcion?: true
    Indicaciones?: true
  }

  export type Tipo_de_examenCountAggregateInputType = {
    id_examen?: true
    Descripcion?: true
    Indicaciones?: true
    _all?: true
  }

  export type Tipo_de_examenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tipo_de_examen to aggregate.
     */
    where?: tipo_de_examenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipo_de_examen to fetch.
     */
    orderBy?: tipo_de_examenOrderByWithRelationInput | tipo_de_examenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tipo_de_examenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipo_de_examen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipo_de_examen.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tipo_de_examen
    **/
    _count?: true | Tipo_de_examenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tipo_de_examenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tipo_de_examenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tipo_de_examenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tipo_de_examenMaxAggregateInputType
  }

  export type GetTipo_de_examenAggregateType<T extends Tipo_de_examenAggregateArgs> = {
        [P in keyof T & keyof AggregateTipo_de_examen]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipo_de_examen[P]>
      : GetScalarType<T[P], AggregateTipo_de_examen[P]>
  }




  export type tipo_de_examenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tipo_de_examenWhereInput
    orderBy?: tipo_de_examenOrderByWithAggregationInput | tipo_de_examenOrderByWithAggregationInput[]
    by: Tipo_de_examenScalarFieldEnum[] | Tipo_de_examenScalarFieldEnum
    having?: tipo_de_examenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tipo_de_examenCountAggregateInputType | true
    _avg?: Tipo_de_examenAvgAggregateInputType
    _sum?: Tipo_de_examenSumAggregateInputType
    _min?: Tipo_de_examenMinAggregateInputType
    _max?: Tipo_de_examenMaxAggregateInputType
  }

  export type Tipo_de_examenGroupByOutputType = {
    id_examen: number
    Descripcion: string
    Indicaciones: string
    _count: Tipo_de_examenCountAggregateOutputType | null
    _avg: Tipo_de_examenAvgAggregateOutputType | null
    _sum: Tipo_de_examenSumAggregateOutputType | null
    _min: Tipo_de_examenMinAggregateOutputType | null
    _max: Tipo_de_examenMaxAggregateOutputType | null
  }

  type GetTipo_de_examenGroupByPayload<T extends tipo_de_examenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Tipo_de_examenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tipo_de_examenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tipo_de_examenGroupByOutputType[P]>
            : GetScalarType<T[P], Tipo_de_examenGroupByOutputType[P]>
        }
      >
    >


  export type tipo_de_examenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_examen?: boolean
    Descripcion?: boolean
    Indicaciones?: boolean
    resultado?: boolean | tipo_de_examen$resultadoArgs<ExtArgs>
    _count?: boolean | Tipo_de_examenCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipo_de_examen"]>

  export type tipo_de_examenSelectScalar = {
    id_examen?: boolean
    Descripcion?: boolean
    Indicaciones?: boolean
  }


  export type tipo_de_examenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resultado?: boolean | tipo_de_examen$resultadoArgs<ExtArgs>
    _count?: boolean | Tipo_de_examenCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $tipo_de_examenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tipo_de_examen"
    objects: {
      resultado: Prisma.$resultadoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_examen: number
      Descripcion: string
      Indicaciones: string
    }, ExtArgs["result"]["tipo_de_examen"]>
    composites: {}
  }


  type tipo_de_examenGetPayload<S extends boolean | null | undefined | tipo_de_examenDefaultArgs> = $Result.GetResult<Prisma.$tipo_de_examenPayload, S>

  type tipo_de_examenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<tipo_de_examenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Tipo_de_examenCountAggregateInputType | true
    }

  export interface tipo_de_examenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tipo_de_examen'], meta: { name: 'tipo_de_examen' } }
    /**
     * Find zero or one Tipo_de_examen that matches the filter.
     * @param {tipo_de_examenFindUniqueArgs} args - Arguments to find a Tipo_de_examen
     * @example
     * // Get one Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tipo_de_examenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, tipo_de_examenFindUniqueArgs<ExtArgs>>
    ): Prisma__tipo_de_examenClient<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tipo_de_examen that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {tipo_de_examenFindUniqueOrThrowArgs} args - Arguments to find a Tipo_de_examen
     * @example
     * // Get one Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tipo_de_examenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tipo_de_examenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__tipo_de_examenClient<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tipo_de_examen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipo_de_examenFindFirstArgs} args - Arguments to find a Tipo_de_examen
     * @example
     * // Get one Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tipo_de_examenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, tipo_de_examenFindFirstArgs<ExtArgs>>
    ): Prisma__tipo_de_examenClient<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tipo_de_examen that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipo_de_examenFindFirstOrThrowArgs} args - Arguments to find a Tipo_de_examen
     * @example
     * // Get one Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tipo_de_examenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tipo_de_examenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__tipo_de_examenClient<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tipo_de_examen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipo_de_examenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.findMany()
     * 
     * // Get first 10 Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.findMany({ take: 10 })
     * 
     * // Only select the `id_examen`
     * const tipo_de_examenWithId_examenOnly = await prisma.tipo_de_examen.findMany({ select: { id_examen: true } })
     * 
    **/
    findMany<T extends tipo_de_examenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tipo_de_examenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tipo_de_examen.
     * @param {tipo_de_examenCreateArgs} args - Arguments to create a Tipo_de_examen.
     * @example
     * // Create one Tipo_de_examen
     * const Tipo_de_examen = await prisma.tipo_de_examen.create({
     *   data: {
     *     // ... data to create a Tipo_de_examen
     *   }
     * })
     * 
    **/
    create<T extends tipo_de_examenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, tipo_de_examenCreateArgs<ExtArgs>>
    ): Prisma__tipo_de_examenClient<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tipo_de_examen.
     * @param {tipo_de_examenCreateManyArgs} args - Arguments to create many Tipo_de_examen.
     * @example
     * // Create many Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends tipo_de_examenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tipo_de_examenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tipo_de_examen and returns the data saved in the database.
     * @param {tipo_de_examenCreateManyAndReturnArgs} args - Arguments to create many Tipo_de_examen.
     * @example
     * // Create many Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tipo_de_examen and only return the `id_examen`
     * const tipo_de_examenWithId_examenOnly = await prisma.tipo_de_examen.createManyAndReturn({ 
     *   select: { id_examen: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends tipo_de_examenCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, tipo_de_examenCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Tipo_de_examen.
     * @param {tipo_de_examenDeleteArgs} args - Arguments to delete one Tipo_de_examen.
     * @example
     * // Delete one Tipo_de_examen
     * const Tipo_de_examen = await prisma.tipo_de_examen.delete({
     *   where: {
     *     // ... filter to delete one Tipo_de_examen
     *   }
     * })
     * 
    **/
    delete<T extends tipo_de_examenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, tipo_de_examenDeleteArgs<ExtArgs>>
    ): Prisma__tipo_de_examenClient<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tipo_de_examen.
     * @param {tipo_de_examenUpdateArgs} args - Arguments to update one Tipo_de_examen.
     * @example
     * // Update one Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tipo_de_examenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, tipo_de_examenUpdateArgs<ExtArgs>>
    ): Prisma__tipo_de_examenClient<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tipo_de_examen.
     * @param {tipo_de_examenDeleteManyArgs} args - Arguments to filter Tipo_de_examen to delete.
     * @example
     * // Delete a few Tipo_de_examen
     * const { count } = await prisma.tipo_de_examen.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tipo_de_examenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tipo_de_examenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tipo_de_examen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipo_de_examenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tipo_de_examenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, tipo_de_examenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tipo_de_examen.
     * @param {tipo_de_examenUpsertArgs} args - Arguments to update or create a Tipo_de_examen.
     * @example
     * // Update or create a Tipo_de_examen
     * const tipo_de_examen = await prisma.tipo_de_examen.upsert({
     *   create: {
     *     // ... data to create a Tipo_de_examen
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tipo_de_examen we want to update
     *   }
     * })
    **/
    upsert<T extends tipo_de_examenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, tipo_de_examenUpsertArgs<ExtArgs>>
    ): Prisma__tipo_de_examenClient<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tipo_de_examen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipo_de_examenCountArgs} args - Arguments to filter Tipo_de_examen to count.
     * @example
     * // Count the number of Tipo_de_examen
     * const count = await prisma.tipo_de_examen.count({
     *   where: {
     *     // ... the filter for the Tipo_de_examen we want to count
     *   }
     * })
    **/
    count<T extends tipo_de_examenCountArgs>(
      args?: Subset<T, tipo_de_examenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tipo_de_examenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tipo_de_examen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tipo_de_examenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tipo_de_examenAggregateArgs>(args: Subset<T, Tipo_de_examenAggregateArgs>): Prisma.PrismaPromise<GetTipo_de_examenAggregateType<T>>

    /**
     * Group by Tipo_de_examen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tipo_de_examenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tipo_de_examenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tipo_de_examenGroupByArgs['orderBy'] }
        : { orderBy?: tipo_de_examenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tipo_de_examenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipo_de_examenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tipo_de_examen model
   */
  readonly fields: tipo_de_examenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tipo_de_examen.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tipo_de_examenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    resultado<T extends tipo_de_examen$resultadoArgs<ExtArgs> = {}>(args?: Subset<T, tipo_de_examen$resultadoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the tipo_de_examen model
   */ 
  interface tipo_de_examenFieldRefs {
    readonly id_examen: FieldRef<"tipo_de_examen", 'Int'>
    readonly Descripcion: FieldRef<"tipo_de_examen", 'String'>
    readonly Indicaciones: FieldRef<"tipo_de_examen", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tipo_de_examen findUnique
   */
  export type tipo_de_examenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
    /**
     * Filter, which tipo_de_examen to fetch.
     */
    where: tipo_de_examenWhereUniqueInput
  }

  /**
   * tipo_de_examen findUniqueOrThrow
   */
  export type tipo_de_examenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
    /**
     * Filter, which tipo_de_examen to fetch.
     */
    where: tipo_de_examenWhereUniqueInput
  }

  /**
   * tipo_de_examen findFirst
   */
  export type tipo_de_examenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
    /**
     * Filter, which tipo_de_examen to fetch.
     */
    where?: tipo_de_examenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipo_de_examen to fetch.
     */
    orderBy?: tipo_de_examenOrderByWithRelationInput | tipo_de_examenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tipo_de_examen.
     */
    cursor?: tipo_de_examenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipo_de_examen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipo_de_examen.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tipo_de_examen.
     */
    distinct?: Tipo_de_examenScalarFieldEnum | Tipo_de_examenScalarFieldEnum[]
  }

  /**
   * tipo_de_examen findFirstOrThrow
   */
  export type tipo_de_examenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
    /**
     * Filter, which tipo_de_examen to fetch.
     */
    where?: tipo_de_examenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipo_de_examen to fetch.
     */
    orderBy?: tipo_de_examenOrderByWithRelationInput | tipo_de_examenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tipo_de_examen.
     */
    cursor?: tipo_de_examenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipo_de_examen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipo_de_examen.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tipo_de_examen.
     */
    distinct?: Tipo_de_examenScalarFieldEnum | Tipo_de_examenScalarFieldEnum[]
  }

  /**
   * tipo_de_examen findMany
   */
  export type tipo_de_examenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
    /**
     * Filter, which tipo_de_examen to fetch.
     */
    where?: tipo_de_examenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tipo_de_examen to fetch.
     */
    orderBy?: tipo_de_examenOrderByWithRelationInput | tipo_de_examenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tipo_de_examen.
     */
    cursor?: tipo_de_examenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tipo_de_examen from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tipo_de_examen.
     */
    skip?: number
    distinct?: Tipo_de_examenScalarFieldEnum | Tipo_de_examenScalarFieldEnum[]
  }

  /**
   * tipo_de_examen create
   */
  export type tipo_de_examenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
    /**
     * The data needed to create a tipo_de_examen.
     */
    data: XOR<tipo_de_examenCreateInput, tipo_de_examenUncheckedCreateInput>
  }

  /**
   * tipo_de_examen createMany
   */
  export type tipo_de_examenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tipo_de_examen.
     */
    data: tipo_de_examenCreateManyInput | tipo_de_examenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tipo_de_examen createManyAndReturn
   */
  export type tipo_de_examenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
    /**
     * The data used to create many tipo_de_examen.
     */
    data: tipo_de_examenCreateManyInput | tipo_de_examenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tipo_de_examen update
   */
  export type tipo_de_examenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
    /**
     * The data needed to update a tipo_de_examen.
     */
    data: XOR<tipo_de_examenUpdateInput, tipo_de_examenUncheckedUpdateInput>
    /**
     * Choose, which tipo_de_examen to update.
     */
    where: tipo_de_examenWhereUniqueInput
  }

  /**
   * tipo_de_examen updateMany
   */
  export type tipo_de_examenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tipo_de_examen.
     */
    data: XOR<tipo_de_examenUpdateManyMutationInput, tipo_de_examenUncheckedUpdateManyInput>
    /**
     * Filter which tipo_de_examen to update
     */
    where?: tipo_de_examenWhereInput
  }

  /**
   * tipo_de_examen upsert
   */
  export type tipo_de_examenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
    /**
     * The filter to search for the tipo_de_examen to update in case it exists.
     */
    where: tipo_de_examenWhereUniqueInput
    /**
     * In case the tipo_de_examen found by the `where` argument doesn't exist, create a new tipo_de_examen with this data.
     */
    create: XOR<tipo_de_examenCreateInput, tipo_de_examenUncheckedCreateInput>
    /**
     * In case the tipo_de_examen was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tipo_de_examenUpdateInput, tipo_de_examenUncheckedUpdateInput>
  }

  /**
   * tipo_de_examen delete
   */
  export type tipo_de_examenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
    /**
     * Filter which tipo_de_examen to delete.
     */
    where: tipo_de_examenWhereUniqueInput
  }

  /**
   * tipo_de_examen deleteMany
   */
  export type tipo_de_examenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tipo_de_examen to delete
     */
    where?: tipo_de_examenWhereInput
  }

  /**
   * tipo_de_examen.resultado
   */
  export type tipo_de_examen$resultadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    where?: resultadoWhereInput
    orderBy?: resultadoOrderByWithRelationInput | resultadoOrderByWithRelationInput[]
    cursor?: resultadoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResultadoScalarFieldEnum | ResultadoScalarFieldEnum[]
  }

  /**
   * tipo_de_examen without action
   */
  export type tipo_de_examenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tipo_de_examen
     */
    select?: tipo_de_examenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tipo_de_examenInclude<ExtArgs> | null
  }


  /**
   * Model resultado
   */

  export type AggregateResultado = {
    _count: ResultadoCountAggregateOutputType | null
    _avg: ResultadoAvgAggregateOutputType | null
    _sum: ResultadoSumAggregateOutputType | null
    _min: ResultadoMinAggregateOutputType | null
    _max: ResultadoMaxAggregateOutputType | null
  }

  export type ResultadoAvgAggregateOutputType = {
    id: number | null
    valor_paga: number | null
    paciente_id: number | null
    examen_id: number | null
  }

  export type ResultadoSumAggregateOutputType = {
    id: number | null
    valor_paga: number | null
    paciente_id: number | null
    examen_id: number | null
  }

  export type ResultadoMinAggregateOutputType = {
    id: number | null
    Resultado_test: string | null
    valor_paga: number | null
    observaciones: string | null
    paciente_id: number | null
    examen_id: number | null
  }

  export type ResultadoMaxAggregateOutputType = {
    id: number | null
    Resultado_test: string | null
    valor_paga: number | null
    observaciones: string | null
    paciente_id: number | null
    examen_id: number | null
  }

  export type ResultadoCountAggregateOutputType = {
    id: number
    Resultado_test: number
    valor_paga: number
    observaciones: number
    paciente_id: number
    examen_id: number
    _all: number
  }


  export type ResultadoAvgAggregateInputType = {
    id?: true
    valor_paga?: true
    paciente_id?: true
    examen_id?: true
  }

  export type ResultadoSumAggregateInputType = {
    id?: true
    valor_paga?: true
    paciente_id?: true
    examen_id?: true
  }

  export type ResultadoMinAggregateInputType = {
    id?: true
    Resultado_test?: true
    valor_paga?: true
    observaciones?: true
    paciente_id?: true
    examen_id?: true
  }

  export type ResultadoMaxAggregateInputType = {
    id?: true
    Resultado_test?: true
    valor_paga?: true
    observaciones?: true
    paciente_id?: true
    examen_id?: true
  }

  export type ResultadoCountAggregateInputType = {
    id?: true
    Resultado_test?: true
    valor_paga?: true
    observaciones?: true
    paciente_id?: true
    examen_id?: true
    _all?: true
  }

  export type ResultadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which resultado to aggregate.
     */
    where?: resultadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of resultados to fetch.
     */
    orderBy?: resultadoOrderByWithRelationInput | resultadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: resultadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` resultados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` resultados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned resultados
    **/
    _count?: true | ResultadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResultadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResultadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResultadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResultadoMaxAggregateInputType
  }

  export type GetResultadoAggregateType<T extends ResultadoAggregateArgs> = {
        [P in keyof T & keyof AggregateResultado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResultado[P]>
      : GetScalarType<T[P], AggregateResultado[P]>
  }




  export type resultadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: resultadoWhereInput
    orderBy?: resultadoOrderByWithAggregationInput | resultadoOrderByWithAggregationInput[]
    by: ResultadoScalarFieldEnum[] | ResultadoScalarFieldEnum
    having?: resultadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResultadoCountAggregateInputType | true
    _avg?: ResultadoAvgAggregateInputType
    _sum?: ResultadoSumAggregateInputType
    _min?: ResultadoMinAggregateInputType
    _max?: ResultadoMaxAggregateInputType
  }

  export type ResultadoGroupByOutputType = {
    id: number
    Resultado_test: string
    valor_paga: number
    observaciones: string
    paciente_id: number
    examen_id: number
    _count: ResultadoCountAggregateOutputType | null
    _avg: ResultadoAvgAggregateOutputType | null
    _sum: ResultadoSumAggregateOutputType | null
    _min: ResultadoMinAggregateOutputType | null
    _max: ResultadoMaxAggregateOutputType | null
  }

  type GetResultadoGroupByPayload<T extends resultadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResultadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResultadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResultadoGroupByOutputType[P]>
            : GetScalarType<T[P], ResultadoGroupByOutputType[P]>
        }
      >
    >


  export type resultadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Resultado_test?: boolean
    valor_paga?: boolean
    observaciones?: boolean
    paciente_id?: boolean
    examen_id?: boolean
    paciente?: boolean | pacienteDefaultArgs<ExtArgs>
    tipo_de_examen?: boolean | tipo_de_examenDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resultado"]>

  export type resultadoSelectScalar = {
    id?: boolean
    Resultado_test?: boolean
    valor_paga?: boolean
    observaciones?: boolean
    paciente_id?: boolean
    examen_id?: boolean
  }


  export type resultadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paciente?: boolean | pacienteDefaultArgs<ExtArgs>
    tipo_de_examen?: boolean | tipo_de_examenDefaultArgs<ExtArgs>
  }


  export type $resultadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "resultado"
    objects: {
      paciente: Prisma.$pacientePayload<ExtArgs>
      tipo_de_examen: Prisma.$tipo_de_examenPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Resultado_test: string
      valor_paga: number
      observaciones: string
      paciente_id: number
      examen_id: number
    }, ExtArgs["result"]["resultado"]>
    composites: {}
  }


  type resultadoGetPayload<S extends boolean | null | undefined | resultadoDefaultArgs> = $Result.GetResult<Prisma.$resultadoPayload, S>

  type resultadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<resultadoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResultadoCountAggregateInputType | true
    }

  export interface resultadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['resultado'], meta: { name: 'resultado' } }
    /**
     * Find zero or one Resultado that matches the filter.
     * @param {resultadoFindUniqueArgs} args - Arguments to find a Resultado
     * @example
     * // Get one Resultado
     * const resultado = await prisma.resultado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends resultadoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, resultadoFindUniqueArgs<ExtArgs>>
    ): Prisma__resultadoClient<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Resultado that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {resultadoFindUniqueOrThrowArgs} args - Arguments to find a Resultado
     * @example
     * // Get one Resultado
     * const resultado = await prisma.resultado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends resultadoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, resultadoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__resultadoClient<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Resultado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultadoFindFirstArgs} args - Arguments to find a Resultado
     * @example
     * // Get one Resultado
     * const resultado = await prisma.resultado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends resultadoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, resultadoFindFirstArgs<ExtArgs>>
    ): Prisma__resultadoClient<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Resultado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultadoFindFirstOrThrowArgs} args - Arguments to find a Resultado
     * @example
     * // Get one Resultado
     * const resultado = await prisma.resultado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends resultadoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, resultadoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__resultadoClient<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Resultados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Resultados
     * const resultados = await prisma.resultado.findMany()
     * 
     * // Get first 10 Resultados
     * const resultados = await prisma.resultado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resultadoWithIdOnly = await prisma.resultado.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends resultadoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, resultadoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Resultado.
     * @param {resultadoCreateArgs} args - Arguments to create a Resultado.
     * @example
     * // Create one Resultado
     * const Resultado = await prisma.resultado.create({
     *   data: {
     *     // ... data to create a Resultado
     *   }
     * })
     * 
    **/
    create<T extends resultadoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, resultadoCreateArgs<ExtArgs>>
    ): Prisma__resultadoClient<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Resultados.
     * @param {resultadoCreateManyArgs} args - Arguments to create many Resultados.
     * @example
     * // Create many Resultados
     * const resultado = await prisma.resultado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends resultadoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, resultadoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Resultados and returns the data saved in the database.
     * @param {resultadoCreateManyAndReturnArgs} args - Arguments to create many Resultados.
     * @example
     * // Create many Resultados
     * const resultado = await prisma.resultado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Resultados and only return the `id`
     * const resultadoWithIdOnly = await prisma.resultado.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends resultadoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, resultadoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Resultado.
     * @param {resultadoDeleteArgs} args - Arguments to delete one Resultado.
     * @example
     * // Delete one Resultado
     * const Resultado = await prisma.resultado.delete({
     *   where: {
     *     // ... filter to delete one Resultado
     *   }
     * })
     * 
    **/
    delete<T extends resultadoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, resultadoDeleteArgs<ExtArgs>>
    ): Prisma__resultadoClient<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Resultado.
     * @param {resultadoUpdateArgs} args - Arguments to update one Resultado.
     * @example
     * // Update one Resultado
     * const resultado = await prisma.resultado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends resultadoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, resultadoUpdateArgs<ExtArgs>>
    ): Prisma__resultadoClient<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Resultados.
     * @param {resultadoDeleteManyArgs} args - Arguments to filter Resultados to delete.
     * @example
     * // Delete a few Resultados
     * const { count } = await prisma.resultado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends resultadoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, resultadoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Resultados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Resultados
     * const resultado = await prisma.resultado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends resultadoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, resultadoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Resultado.
     * @param {resultadoUpsertArgs} args - Arguments to update or create a Resultado.
     * @example
     * // Update or create a Resultado
     * const resultado = await prisma.resultado.upsert({
     *   create: {
     *     // ... data to create a Resultado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Resultado we want to update
     *   }
     * })
    **/
    upsert<T extends resultadoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, resultadoUpsertArgs<ExtArgs>>
    ): Prisma__resultadoClient<$Result.GetResult<Prisma.$resultadoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Resultados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultadoCountArgs} args - Arguments to filter Resultados to count.
     * @example
     * // Count the number of Resultados
     * const count = await prisma.resultado.count({
     *   where: {
     *     // ... the filter for the Resultados we want to count
     *   }
     * })
    **/
    count<T extends resultadoCountArgs>(
      args?: Subset<T, resultadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResultadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Resultado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResultadoAggregateArgs>(args: Subset<T, ResultadoAggregateArgs>): Prisma.PrismaPromise<GetResultadoAggregateType<T>>

    /**
     * Group by Resultado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {resultadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends resultadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: resultadoGroupByArgs['orderBy'] }
        : { orderBy?: resultadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, resultadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResultadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the resultado model
   */
  readonly fields: resultadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for resultado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__resultadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    paciente<T extends pacienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, pacienteDefaultArgs<ExtArgs>>): Prisma__pacienteClient<$Result.GetResult<Prisma.$pacientePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tipo_de_examen<T extends tipo_de_examenDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tipo_de_examenDefaultArgs<ExtArgs>>): Prisma__tipo_de_examenClient<$Result.GetResult<Prisma.$tipo_de_examenPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the resultado model
   */ 
  interface resultadoFieldRefs {
    readonly id: FieldRef<"resultado", 'Int'>
    readonly Resultado_test: FieldRef<"resultado", 'String'>
    readonly valor_paga: FieldRef<"resultado", 'Int'>
    readonly observaciones: FieldRef<"resultado", 'String'>
    readonly paciente_id: FieldRef<"resultado", 'Int'>
    readonly examen_id: FieldRef<"resultado", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * resultado findUnique
   */
  export type resultadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    /**
     * Filter, which resultado to fetch.
     */
    where: resultadoWhereUniqueInput
  }

  /**
   * resultado findUniqueOrThrow
   */
  export type resultadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    /**
     * Filter, which resultado to fetch.
     */
    where: resultadoWhereUniqueInput
  }

  /**
   * resultado findFirst
   */
  export type resultadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    /**
     * Filter, which resultado to fetch.
     */
    where?: resultadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of resultados to fetch.
     */
    orderBy?: resultadoOrderByWithRelationInput | resultadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for resultados.
     */
    cursor?: resultadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` resultados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` resultados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of resultados.
     */
    distinct?: ResultadoScalarFieldEnum | ResultadoScalarFieldEnum[]
  }

  /**
   * resultado findFirstOrThrow
   */
  export type resultadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    /**
     * Filter, which resultado to fetch.
     */
    where?: resultadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of resultados to fetch.
     */
    orderBy?: resultadoOrderByWithRelationInput | resultadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for resultados.
     */
    cursor?: resultadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` resultados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` resultados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of resultados.
     */
    distinct?: ResultadoScalarFieldEnum | ResultadoScalarFieldEnum[]
  }

  /**
   * resultado findMany
   */
  export type resultadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    /**
     * Filter, which resultados to fetch.
     */
    where?: resultadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of resultados to fetch.
     */
    orderBy?: resultadoOrderByWithRelationInput | resultadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing resultados.
     */
    cursor?: resultadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` resultados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` resultados.
     */
    skip?: number
    distinct?: ResultadoScalarFieldEnum | ResultadoScalarFieldEnum[]
  }

  /**
   * resultado create
   */
  export type resultadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    /**
     * The data needed to create a resultado.
     */
    data: XOR<resultadoCreateInput, resultadoUncheckedCreateInput>
  }

  /**
   * resultado createMany
   */
  export type resultadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many resultados.
     */
    data: resultadoCreateManyInput | resultadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * resultado createManyAndReturn
   */
  export type resultadoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    /**
     * The data used to create many resultados.
     */
    data: resultadoCreateManyInput | resultadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * resultado update
   */
  export type resultadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    /**
     * The data needed to update a resultado.
     */
    data: XOR<resultadoUpdateInput, resultadoUncheckedUpdateInput>
    /**
     * Choose, which resultado to update.
     */
    where: resultadoWhereUniqueInput
  }

  /**
   * resultado updateMany
   */
  export type resultadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update resultados.
     */
    data: XOR<resultadoUpdateManyMutationInput, resultadoUncheckedUpdateManyInput>
    /**
     * Filter which resultados to update
     */
    where?: resultadoWhereInput
  }

  /**
   * resultado upsert
   */
  export type resultadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    /**
     * The filter to search for the resultado to update in case it exists.
     */
    where: resultadoWhereUniqueInput
    /**
     * In case the resultado found by the `where` argument doesn't exist, create a new resultado with this data.
     */
    create: XOR<resultadoCreateInput, resultadoUncheckedCreateInput>
    /**
     * In case the resultado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<resultadoUpdateInput, resultadoUncheckedUpdateInput>
  }

  /**
   * resultado delete
   */
  export type resultadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
    /**
     * Filter which resultado to delete.
     */
    where: resultadoWhereUniqueInput
  }

  /**
   * resultado deleteMany
   */
  export type resultadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which resultados to delete
     */
    where?: resultadoWhereInput
  }

  /**
   * resultado without action
   */
  export type resultadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the resultado
     */
    select?: resultadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: resultadoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PacienteScalarFieldEnum: {
    id_paciente: 'id_paciente',
    nombre: 'nombre',
    CI_paciente: 'CI_paciente'
  };

  export type PacienteScalarFieldEnum = (typeof PacienteScalarFieldEnum)[keyof typeof PacienteScalarFieldEnum]


  export const Tipo_de_examenScalarFieldEnum: {
    id_examen: 'id_examen',
    Descripcion: 'Descripcion',
    Indicaciones: 'Indicaciones'
  };

  export type Tipo_de_examenScalarFieldEnum = (typeof Tipo_de_examenScalarFieldEnum)[keyof typeof Tipo_de_examenScalarFieldEnum]


  export const ResultadoScalarFieldEnum: {
    id: 'id',
    Resultado_test: 'Resultado_test',
    valor_paga: 'valor_paga',
    observaciones: 'observaciones',
    paciente_id: 'paciente_id',
    examen_id: 'examen_id'
  };

  export type ResultadoScalarFieldEnum = (typeof ResultadoScalarFieldEnum)[keyof typeof ResultadoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type pacienteWhereInput = {
    AND?: pacienteWhereInput | pacienteWhereInput[]
    OR?: pacienteWhereInput[]
    NOT?: pacienteWhereInput | pacienteWhereInput[]
    id_paciente?: IntFilter<"paciente"> | number
    nombre?: StringFilter<"paciente"> | string
    CI_paciente?: IntFilter<"paciente"> | number
    resultado?: ResultadoListRelationFilter
  }

  export type pacienteOrderByWithRelationInput = {
    id_paciente?: SortOrder
    nombre?: SortOrder
    CI_paciente?: SortOrder
    resultado?: resultadoOrderByRelationAggregateInput
  }

  export type pacienteWhereUniqueInput = Prisma.AtLeast<{
    id_paciente?: number
    AND?: pacienteWhereInput | pacienteWhereInput[]
    OR?: pacienteWhereInput[]
    NOT?: pacienteWhereInput | pacienteWhereInput[]
    nombre?: StringFilter<"paciente"> | string
    CI_paciente?: IntFilter<"paciente"> | number
    resultado?: ResultadoListRelationFilter
  }, "id_paciente">

  export type pacienteOrderByWithAggregationInput = {
    id_paciente?: SortOrder
    nombre?: SortOrder
    CI_paciente?: SortOrder
    _count?: pacienteCountOrderByAggregateInput
    _avg?: pacienteAvgOrderByAggregateInput
    _max?: pacienteMaxOrderByAggregateInput
    _min?: pacienteMinOrderByAggregateInput
    _sum?: pacienteSumOrderByAggregateInput
  }

  export type pacienteScalarWhereWithAggregatesInput = {
    AND?: pacienteScalarWhereWithAggregatesInput | pacienteScalarWhereWithAggregatesInput[]
    OR?: pacienteScalarWhereWithAggregatesInput[]
    NOT?: pacienteScalarWhereWithAggregatesInput | pacienteScalarWhereWithAggregatesInput[]
    id_paciente?: IntWithAggregatesFilter<"paciente"> | number
    nombre?: StringWithAggregatesFilter<"paciente"> | string
    CI_paciente?: IntWithAggregatesFilter<"paciente"> | number
  }

  export type tipo_de_examenWhereInput = {
    AND?: tipo_de_examenWhereInput | tipo_de_examenWhereInput[]
    OR?: tipo_de_examenWhereInput[]
    NOT?: tipo_de_examenWhereInput | tipo_de_examenWhereInput[]
    id_examen?: IntFilter<"tipo_de_examen"> | number
    Descripcion?: StringFilter<"tipo_de_examen"> | string
    Indicaciones?: StringFilter<"tipo_de_examen"> | string
    resultado?: ResultadoListRelationFilter
  }

  export type tipo_de_examenOrderByWithRelationInput = {
    id_examen?: SortOrder
    Descripcion?: SortOrder
    Indicaciones?: SortOrder
    resultado?: resultadoOrderByRelationAggregateInput
  }

  export type tipo_de_examenWhereUniqueInput = Prisma.AtLeast<{
    id_examen?: number
    AND?: tipo_de_examenWhereInput | tipo_de_examenWhereInput[]
    OR?: tipo_de_examenWhereInput[]
    NOT?: tipo_de_examenWhereInput | tipo_de_examenWhereInput[]
    Descripcion?: StringFilter<"tipo_de_examen"> | string
    Indicaciones?: StringFilter<"tipo_de_examen"> | string
    resultado?: ResultadoListRelationFilter
  }, "id_examen">

  export type tipo_de_examenOrderByWithAggregationInput = {
    id_examen?: SortOrder
    Descripcion?: SortOrder
    Indicaciones?: SortOrder
    _count?: tipo_de_examenCountOrderByAggregateInput
    _avg?: tipo_de_examenAvgOrderByAggregateInput
    _max?: tipo_de_examenMaxOrderByAggregateInput
    _min?: tipo_de_examenMinOrderByAggregateInput
    _sum?: tipo_de_examenSumOrderByAggregateInput
  }

  export type tipo_de_examenScalarWhereWithAggregatesInput = {
    AND?: tipo_de_examenScalarWhereWithAggregatesInput | tipo_de_examenScalarWhereWithAggregatesInput[]
    OR?: tipo_de_examenScalarWhereWithAggregatesInput[]
    NOT?: tipo_de_examenScalarWhereWithAggregatesInput | tipo_de_examenScalarWhereWithAggregatesInput[]
    id_examen?: IntWithAggregatesFilter<"tipo_de_examen"> | number
    Descripcion?: StringWithAggregatesFilter<"tipo_de_examen"> | string
    Indicaciones?: StringWithAggregatesFilter<"tipo_de_examen"> | string
  }

  export type resultadoWhereInput = {
    AND?: resultadoWhereInput | resultadoWhereInput[]
    OR?: resultadoWhereInput[]
    NOT?: resultadoWhereInput | resultadoWhereInput[]
    id?: IntFilter<"resultado"> | number
    Resultado_test?: StringFilter<"resultado"> | string
    valor_paga?: IntFilter<"resultado"> | number
    observaciones?: StringFilter<"resultado"> | string
    paciente_id?: IntFilter<"resultado"> | number
    examen_id?: IntFilter<"resultado"> | number
    paciente?: XOR<PacienteRelationFilter, pacienteWhereInput>
    tipo_de_examen?: XOR<Tipo_de_examenRelationFilter, tipo_de_examenWhereInput>
  }

  export type resultadoOrderByWithRelationInput = {
    id?: SortOrder
    Resultado_test?: SortOrder
    valor_paga?: SortOrder
    observaciones?: SortOrder
    paciente_id?: SortOrder
    examen_id?: SortOrder
    paciente?: pacienteOrderByWithRelationInput
    tipo_de_examen?: tipo_de_examenOrderByWithRelationInput
  }

  export type resultadoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: resultadoWhereInput | resultadoWhereInput[]
    OR?: resultadoWhereInput[]
    NOT?: resultadoWhereInput | resultadoWhereInput[]
    Resultado_test?: StringFilter<"resultado"> | string
    valor_paga?: IntFilter<"resultado"> | number
    observaciones?: StringFilter<"resultado"> | string
    paciente_id?: IntFilter<"resultado"> | number
    examen_id?: IntFilter<"resultado"> | number
    paciente?: XOR<PacienteRelationFilter, pacienteWhereInput>
    tipo_de_examen?: XOR<Tipo_de_examenRelationFilter, tipo_de_examenWhereInput>
  }, "id">

  export type resultadoOrderByWithAggregationInput = {
    id?: SortOrder
    Resultado_test?: SortOrder
    valor_paga?: SortOrder
    observaciones?: SortOrder
    paciente_id?: SortOrder
    examen_id?: SortOrder
    _count?: resultadoCountOrderByAggregateInput
    _avg?: resultadoAvgOrderByAggregateInput
    _max?: resultadoMaxOrderByAggregateInput
    _min?: resultadoMinOrderByAggregateInput
    _sum?: resultadoSumOrderByAggregateInput
  }

  export type resultadoScalarWhereWithAggregatesInput = {
    AND?: resultadoScalarWhereWithAggregatesInput | resultadoScalarWhereWithAggregatesInput[]
    OR?: resultadoScalarWhereWithAggregatesInput[]
    NOT?: resultadoScalarWhereWithAggregatesInput | resultadoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"resultado"> | number
    Resultado_test?: StringWithAggregatesFilter<"resultado"> | string
    valor_paga?: IntWithAggregatesFilter<"resultado"> | number
    observaciones?: StringWithAggregatesFilter<"resultado"> | string
    paciente_id?: IntWithAggregatesFilter<"resultado"> | number
    examen_id?: IntWithAggregatesFilter<"resultado"> | number
  }

  export type pacienteCreateInput = {
    nombre: string
    CI_paciente: number
    resultado?: resultadoCreateNestedManyWithoutPacienteInput
  }

  export type pacienteUncheckedCreateInput = {
    id_paciente?: number
    nombre: string
    CI_paciente: number
    resultado?: resultadoUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type pacienteUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    CI_paciente?: IntFieldUpdateOperationsInput | number
    resultado?: resultadoUpdateManyWithoutPacienteNestedInput
  }

  export type pacienteUncheckedUpdateInput = {
    id_paciente?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    CI_paciente?: IntFieldUpdateOperationsInput | number
    resultado?: resultadoUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type pacienteCreateManyInput = {
    id_paciente?: number
    nombre: string
    CI_paciente: number
  }

  export type pacienteUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    CI_paciente?: IntFieldUpdateOperationsInput | number
  }

  export type pacienteUncheckedUpdateManyInput = {
    id_paciente?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    CI_paciente?: IntFieldUpdateOperationsInput | number
  }

  export type tipo_de_examenCreateInput = {
    Descripcion: string
    Indicaciones: string
    resultado?: resultadoCreateNestedManyWithoutTipo_de_examenInput
  }

  export type tipo_de_examenUncheckedCreateInput = {
    id_examen?: number
    Descripcion: string
    Indicaciones: string
    resultado?: resultadoUncheckedCreateNestedManyWithoutTipo_de_examenInput
  }

  export type tipo_de_examenUpdateInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Indicaciones?: StringFieldUpdateOperationsInput | string
    resultado?: resultadoUpdateManyWithoutTipo_de_examenNestedInput
  }

  export type tipo_de_examenUncheckedUpdateInput = {
    id_examen?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Indicaciones?: StringFieldUpdateOperationsInput | string
    resultado?: resultadoUncheckedUpdateManyWithoutTipo_de_examenNestedInput
  }

  export type tipo_de_examenCreateManyInput = {
    id_examen?: number
    Descripcion: string
    Indicaciones: string
  }

  export type tipo_de_examenUpdateManyMutationInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Indicaciones?: StringFieldUpdateOperationsInput | string
  }

  export type tipo_de_examenUncheckedUpdateManyInput = {
    id_examen?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Indicaciones?: StringFieldUpdateOperationsInput | string
  }

  export type resultadoCreateInput = {
    Resultado_test: string
    valor_paga: number
    observaciones: string
    paciente: pacienteCreateNestedOneWithoutResultadoInput
    tipo_de_examen: tipo_de_examenCreateNestedOneWithoutResultadoInput
  }

  export type resultadoUncheckedCreateInput = {
    id?: number
    Resultado_test: string
    valor_paga: number
    observaciones: string
    paciente_id: number
    examen_id: number
  }

  export type resultadoUpdateInput = {
    Resultado_test?: StringFieldUpdateOperationsInput | string
    valor_paga?: IntFieldUpdateOperationsInput | number
    observaciones?: StringFieldUpdateOperationsInput | string
    paciente?: pacienteUpdateOneRequiredWithoutResultadoNestedInput
    tipo_de_examen?: tipo_de_examenUpdateOneRequiredWithoutResultadoNestedInput
  }

  export type resultadoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Resultado_test?: StringFieldUpdateOperationsInput | string
    valor_paga?: IntFieldUpdateOperationsInput | number
    observaciones?: StringFieldUpdateOperationsInput | string
    paciente_id?: IntFieldUpdateOperationsInput | number
    examen_id?: IntFieldUpdateOperationsInput | number
  }

  export type resultadoCreateManyInput = {
    id?: number
    Resultado_test: string
    valor_paga: number
    observaciones: string
    paciente_id: number
    examen_id: number
  }

  export type resultadoUpdateManyMutationInput = {
    Resultado_test?: StringFieldUpdateOperationsInput | string
    valor_paga?: IntFieldUpdateOperationsInput | number
    observaciones?: StringFieldUpdateOperationsInput | string
  }

  export type resultadoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Resultado_test?: StringFieldUpdateOperationsInput | string
    valor_paga?: IntFieldUpdateOperationsInput | number
    observaciones?: StringFieldUpdateOperationsInput | string
    paciente_id?: IntFieldUpdateOperationsInput | number
    examen_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ResultadoListRelationFilter = {
    every?: resultadoWhereInput
    some?: resultadoWhereInput
    none?: resultadoWhereInput
  }

  export type resultadoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type pacienteCountOrderByAggregateInput = {
    id_paciente?: SortOrder
    nombre?: SortOrder
    CI_paciente?: SortOrder
  }

  export type pacienteAvgOrderByAggregateInput = {
    id_paciente?: SortOrder
    CI_paciente?: SortOrder
  }

  export type pacienteMaxOrderByAggregateInput = {
    id_paciente?: SortOrder
    nombre?: SortOrder
    CI_paciente?: SortOrder
  }

  export type pacienteMinOrderByAggregateInput = {
    id_paciente?: SortOrder
    nombre?: SortOrder
    CI_paciente?: SortOrder
  }

  export type pacienteSumOrderByAggregateInput = {
    id_paciente?: SortOrder
    CI_paciente?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type tipo_de_examenCountOrderByAggregateInput = {
    id_examen?: SortOrder
    Descripcion?: SortOrder
    Indicaciones?: SortOrder
  }

  export type tipo_de_examenAvgOrderByAggregateInput = {
    id_examen?: SortOrder
  }

  export type tipo_de_examenMaxOrderByAggregateInput = {
    id_examen?: SortOrder
    Descripcion?: SortOrder
    Indicaciones?: SortOrder
  }

  export type tipo_de_examenMinOrderByAggregateInput = {
    id_examen?: SortOrder
    Descripcion?: SortOrder
    Indicaciones?: SortOrder
  }

  export type tipo_de_examenSumOrderByAggregateInput = {
    id_examen?: SortOrder
  }

  export type PacienteRelationFilter = {
    is?: pacienteWhereInput
    isNot?: pacienteWhereInput
  }

  export type Tipo_de_examenRelationFilter = {
    is?: tipo_de_examenWhereInput
    isNot?: tipo_de_examenWhereInput
  }

  export type resultadoCountOrderByAggregateInput = {
    id?: SortOrder
    Resultado_test?: SortOrder
    valor_paga?: SortOrder
    observaciones?: SortOrder
    paciente_id?: SortOrder
    examen_id?: SortOrder
  }

  export type resultadoAvgOrderByAggregateInput = {
    id?: SortOrder
    valor_paga?: SortOrder
    paciente_id?: SortOrder
    examen_id?: SortOrder
  }

  export type resultadoMaxOrderByAggregateInput = {
    id?: SortOrder
    Resultado_test?: SortOrder
    valor_paga?: SortOrder
    observaciones?: SortOrder
    paciente_id?: SortOrder
    examen_id?: SortOrder
  }

  export type resultadoMinOrderByAggregateInput = {
    id?: SortOrder
    Resultado_test?: SortOrder
    valor_paga?: SortOrder
    observaciones?: SortOrder
    paciente_id?: SortOrder
    examen_id?: SortOrder
  }

  export type resultadoSumOrderByAggregateInput = {
    id?: SortOrder
    valor_paga?: SortOrder
    paciente_id?: SortOrder
    examen_id?: SortOrder
  }

  export type resultadoCreateNestedManyWithoutPacienteInput = {
    create?: XOR<resultadoCreateWithoutPacienteInput, resultadoUncheckedCreateWithoutPacienteInput> | resultadoCreateWithoutPacienteInput[] | resultadoUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: resultadoCreateOrConnectWithoutPacienteInput | resultadoCreateOrConnectWithoutPacienteInput[]
    createMany?: resultadoCreateManyPacienteInputEnvelope
    connect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
  }

  export type resultadoUncheckedCreateNestedManyWithoutPacienteInput = {
    create?: XOR<resultadoCreateWithoutPacienteInput, resultadoUncheckedCreateWithoutPacienteInput> | resultadoCreateWithoutPacienteInput[] | resultadoUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: resultadoCreateOrConnectWithoutPacienteInput | resultadoCreateOrConnectWithoutPacienteInput[]
    createMany?: resultadoCreateManyPacienteInputEnvelope
    connect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type resultadoUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<resultadoCreateWithoutPacienteInput, resultadoUncheckedCreateWithoutPacienteInput> | resultadoCreateWithoutPacienteInput[] | resultadoUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: resultadoCreateOrConnectWithoutPacienteInput | resultadoCreateOrConnectWithoutPacienteInput[]
    upsert?: resultadoUpsertWithWhereUniqueWithoutPacienteInput | resultadoUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: resultadoCreateManyPacienteInputEnvelope
    set?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    disconnect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    delete?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    connect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    update?: resultadoUpdateWithWhereUniqueWithoutPacienteInput | resultadoUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: resultadoUpdateManyWithWhereWithoutPacienteInput | resultadoUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: resultadoScalarWhereInput | resultadoScalarWhereInput[]
  }

  export type resultadoUncheckedUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<resultadoCreateWithoutPacienteInput, resultadoUncheckedCreateWithoutPacienteInput> | resultadoCreateWithoutPacienteInput[] | resultadoUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: resultadoCreateOrConnectWithoutPacienteInput | resultadoCreateOrConnectWithoutPacienteInput[]
    upsert?: resultadoUpsertWithWhereUniqueWithoutPacienteInput | resultadoUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: resultadoCreateManyPacienteInputEnvelope
    set?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    disconnect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    delete?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    connect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    update?: resultadoUpdateWithWhereUniqueWithoutPacienteInput | resultadoUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: resultadoUpdateManyWithWhereWithoutPacienteInput | resultadoUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: resultadoScalarWhereInput | resultadoScalarWhereInput[]
  }

  export type resultadoCreateNestedManyWithoutTipo_de_examenInput = {
    create?: XOR<resultadoCreateWithoutTipo_de_examenInput, resultadoUncheckedCreateWithoutTipo_de_examenInput> | resultadoCreateWithoutTipo_de_examenInput[] | resultadoUncheckedCreateWithoutTipo_de_examenInput[]
    connectOrCreate?: resultadoCreateOrConnectWithoutTipo_de_examenInput | resultadoCreateOrConnectWithoutTipo_de_examenInput[]
    createMany?: resultadoCreateManyTipo_de_examenInputEnvelope
    connect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
  }

  export type resultadoUncheckedCreateNestedManyWithoutTipo_de_examenInput = {
    create?: XOR<resultadoCreateWithoutTipo_de_examenInput, resultadoUncheckedCreateWithoutTipo_de_examenInput> | resultadoCreateWithoutTipo_de_examenInput[] | resultadoUncheckedCreateWithoutTipo_de_examenInput[]
    connectOrCreate?: resultadoCreateOrConnectWithoutTipo_de_examenInput | resultadoCreateOrConnectWithoutTipo_de_examenInput[]
    createMany?: resultadoCreateManyTipo_de_examenInputEnvelope
    connect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
  }

  export type resultadoUpdateManyWithoutTipo_de_examenNestedInput = {
    create?: XOR<resultadoCreateWithoutTipo_de_examenInput, resultadoUncheckedCreateWithoutTipo_de_examenInput> | resultadoCreateWithoutTipo_de_examenInput[] | resultadoUncheckedCreateWithoutTipo_de_examenInput[]
    connectOrCreate?: resultadoCreateOrConnectWithoutTipo_de_examenInput | resultadoCreateOrConnectWithoutTipo_de_examenInput[]
    upsert?: resultadoUpsertWithWhereUniqueWithoutTipo_de_examenInput | resultadoUpsertWithWhereUniqueWithoutTipo_de_examenInput[]
    createMany?: resultadoCreateManyTipo_de_examenInputEnvelope
    set?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    disconnect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    delete?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    connect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    update?: resultadoUpdateWithWhereUniqueWithoutTipo_de_examenInput | resultadoUpdateWithWhereUniqueWithoutTipo_de_examenInput[]
    updateMany?: resultadoUpdateManyWithWhereWithoutTipo_de_examenInput | resultadoUpdateManyWithWhereWithoutTipo_de_examenInput[]
    deleteMany?: resultadoScalarWhereInput | resultadoScalarWhereInput[]
  }

  export type resultadoUncheckedUpdateManyWithoutTipo_de_examenNestedInput = {
    create?: XOR<resultadoCreateWithoutTipo_de_examenInput, resultadoUncheckedCreateWithoutTipo_de_examenInput> | resultadoCreateWithoutTipo_de_examenInput[] | resultadoUncheckedCreateWithoutTipo_de_examenInput[]
    connectOrCreate?: resultadoCreateOrConnectWithoutTipo_de_examenInput | resultadoCreateOrConnectWithoutTipo_de_examenInput[]
    upsert?: resultadoUpsertWithWhereUniqueWithoutTipo_de_examenInput | resultadoUpsertWithWhereUniqueWithoutTipo_de_examenInput[]
    createMany?: resultadoCreateManyTipo_de_examenInputEnvelope
    set?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    disconnect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    delete?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    connect?: resultadoWhereUniqueInput | resultadoWhereUniqueInput[]
    update?: resultadoUpdateWithWhereUniqueWithoutTipo_de_examenInput | resultadoUpdateWithWhereUniqueWithoutTipo_de_examenInput[]
    updateMany?: resultadoUpdateManyWithWhereWithoutTipo_de_examenInput | resultadoUpdateManyWithWhereWithoutTipo_de_examenInput[]
    deleteMany?: resultadoScalarWhereInput | resultadoScalarWhereInput[]
  }

  export type pacienteCreateNestedOneWithoutResultadoInput = {
    create?: XOR<pacienteCreateWithoutResultadoInput, pacienteUncheckedCreateWithoutResultadoInput>
    connectOrCreate?: pacienteCreateOrConnectWithoutResultadoInput
    connect?: pacienteWhereUniqueInput
  }

  export type tipo_de_examenCreateNestedOneWithoutResultadoInput = {
    create?: XOR<tipo_de_examenCreateWithoutResultadoInput, tipo_de_examenUncheckedCreateWithoutResultadoInput>
    connectOrCreate?: tipo_de_examenCreateOrConnectWithoutResultadoInput
    connect?: tipo_de_examenWhereUniqueInput
  }

  export type pacienteUpdateOneRequiredWithoutResultadoNestedInput = {
    create?: XOR<pacienteCreateWithoutResultadoInput, pacienteUncheckedCreateWithoutResultadoInput>
    connectOrCreate?: pacienteCreateOrConnectWithoutResultadoInput
    upsert?: pacienteUpsertWithoutResultadoInput
    connect?: pacienteWhereUniqueInput
    update?: XOR<XOR<pacienteUpdateToOneWithWhereWithoutResultadoInput, pacienteUpdateWithoutResultadoInput>, pacienteUncheckedUpdateWithoutResultadoInput>
  }

  export type tipo_de_examenUpdateOneRequiredWithoutResultadoNestedInput = {
    create?: XOR<tipo_de_examenCreateWithoutResultadoInput, tipo_de_examenUncheckedCreateWithoutResultadoInput>
    connectOrCreate?: tipo_de_examenCreateOrConnectWithoutResultadoInput
    upsert?: tipo_de_examenUpsertWithoutResultadoInput
    connect?: tipo_de_examenWhereUniqueInput
    update?: XOR<XOR<tipo_de_examenUpdateToOneWithWhereWithoutResultadoInput, tipo_de_examenUpdateWithoutResultadoInput>, tipo_de_examenUncheckedUpdateWithoutResultadoInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type resultadoCreateWithoutPacienteInput = {
    Resultado_test: string
    valor_paga: number
    observaciones: string
    tipo_de_examen: tipo_de_examenCreateNestedOneWithoutResultadoInput
  }

  export type resultadoUncheckedCreateWithoutPacienteInput = {
    id?: number
    Resultado_test: string
    valor_paga: number
    observaciones: string
    examen_id: number
  }

  export type resultadoCreateOrConnectWithoutPacienteInput = {
    where: resultadoWhereUniqueInput
    create: XOR<resultadoCreateWithoutPacienteInput, resultadoUncheckedCreateWithoutPacienteInput>
  }

  export type resultadoCreateManyPacienteInputEnvelope = {
    data: resultadoCreateManyPacienteInput | resultadoCreateManyPacienteInput[]
    skipDuplicates?: boolean
  }

  export type resultadoUpsertWithWhereUniqueWithoutPacienteInput = {
    where: resultadoWhereUniqueInput
    update: XOR<resultadoUpdateWithoutPacienteInput, resultadoUncheckedUpdateWithoutPacienteInput>
    create: XOR<resultadoCreateWithoutPacienteInput, resultadoUncheckedCreateWithoutPacienteInput>
  }

  export type resultadoUpdateWithWhereUniqueWithoutPacienteInput = {
    where: resultadoWhereUniqueInput
    data: XOR<resultadoUpdateWithoutPacienteInput, resultadoUncheckedUpdateWithoutPacienteInput>
  }

  export type resultadoUpdateManyWithWhereWithoutPacienteInput = {
    where: resultadoScalarWhereInput
    data: XOR<resultadoUpdateManyMutationInput, resultadoUncheckedUpdateManyWithoutPacienteInput>
  }

  export type resultadoScalarWhereInput = {
    AND?: resultadoScalarWhereInput | resultadoScalarWhereInput[]
    OR?: resultadoScalarWhereInput[]
    NOT?: resultadoScalarWhereInput | resultadoScalarWhereInput[]
    id?: IntFilter<"resultado"> | number
    Resultado_test?: StringFilter<"resultado"> | string
    valor_paga?: IntFilter<"resultado"> | number
    observaciones?: StringFilter<"resultado"> | string
    paciente_id?: IntFilter<"resultado"> | number
    examen_id?: IntFilter<"resultado"> | number
  }

  export type resultadoCreateWithoutTipo_de_examenInput = {
    Resultado_test: string
    valor_paga: number
    observaciones: string
    paciente: pacienteCreateNestedOneWithoutResultadoInput
  }

  export type resultadoUncheckedCreateWithoutTipo_de_examenInput = {
    id?: number
    Resultado_test: string
    valor_paga: number
    observaciones: string
    paciente_id: number
  }

  export type resultadoCreateOrConnectWithoutTipo_de_examenInput = {
    where: resultadoWhereUniqueInput
    create: XOR<resultadoCreateWithoutTipo_de_examenInput, resultadoUncheckedCreateWithoutTipo_de_examenInput>
  }

  export type resultadoCreateManyTipo_de_examenInputEnvelope = {
    data: resultadoCreateManyTipo_de_examenInput | resultadoCreateManyTipo_de_examenInput[]
    skipDuplicates?: boolean
  }

  export type resultadoUpsertWithWhereUniqueWithoutTipo_de_examenInput = {
    where: resultadoWhereUniqueInput
    update: XOR<resultadoUpdateWithoutTipo_de_examenInput, resultadoUncheckedUpdateWithoutTipo_de_examenInput>
    create: XOR<resultadoCreateWithoutTipo_de_examenInput, resultadoUncheckedCreateWithoutTipo_de_examenInput>
  }

  export type resultadoUpdateWithWhereUniqueWithoutTipo_de_examenInput = {
    where: resultadoWhereUniqueInput
    data: XOR<resultadoUpdateWithoutTipo_de_examenInput, resultadoUncheckedUpdateWithoutTipo_de_examenInput>
  }

  export type resultadoUpdateManyWithWhereWithoutTipo_de_examenInput = {
    where: resultadoScalarWhereInput
    data: XOR<resultadoUpdateManyMutationInput, resultadoUncheckedUpdateManyWithoutTipo_de_examenInput>
  }

  export type pacienteCreateWithoutResultadoInput = {
    nombre: string
    CI_paciente: number
  }

  export type pacienteUncheckedCreateWithoutResultadoInput = {
    id_paciente?: number
    nombre: string
    CI_paciente: number
  }

  export type pacienteCreateOrConnectWithoutResultadoInput = {
    where: pacienteWhereUniqueInput
    create: XOR<pacienteCreateWithoutResultadoInput, pacienteUncheckedCreateWithoutResultadoInput>
  }

  export type tipo_de_examenCreateWithoutResultadoInput = {
    Descripcion: string
    Indicaciones: string
  }

  export type tipo_de_examenUncheckedCreateWithoutResultadoInput = {
    id_examen?: number
    Descripcion: string
    Indicaciones: string
  }

  export type tipo_de_examenCreateOrConnectWithoutResultadoInput = {
    where: tipo_de_examenWhereUniqueInput
    create: XOR<tipo_de_examenCreateWithoutResultadoInput, tipo_de_examenUncheckedCreateWithoutResultadoInput>
  }

  export type pacienteUpsertWithoutResultadoInput = {
    update: XOR<pacienteUpdateWithoutResultadoInput, pacienteUncheckedUpdateWithoutResultadoInput>
    create: XOR<pacienteCreateWithoutResultadoInput, pacienteUncheckedCreateWithoutResultadoInput>
    where?: pacienteWhereInput
  }

  export type pacienteUpdateToOneWithWhereWithoutResultadoInput = {
    where?: pacienteWhereInput
    data: XOR<pacienteUpdateWithoutResultadoInput, pacienteUncheckedUpdateWithoutResultadoInput>
  }

  export type pacienteUpdateWithoutResultadoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    CI_paciente?: IntFieldUpdateOperationsInput | number
  }

  export type pacienteUncheckedUpdateWithoutResultadoInput = {
    id_paciente?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    CI_paciente?: IntFieldUpdateOperationsInput | number
  }

  export type tipo_de_examenUpsertWithoutResultadoInput = {
    update: XOR<tipo_de_examenUpdateWithoutResultadoInput, tipo_de_examenUncheckedUpdateWithoutResultadoInput>
    create: XOR<tipo_de_examenCreateWithoutResultadoInput, tipo_de_examenUncheckedCreateWithoutResultadoInput>
    where?: tipo_de_examenWhereInput
  }

  export type tipo_de_examenUpdateToOneWithWhereWithoutResultadoInput = {
    where?: tipo_de_examenWhereInput
    data: XOR<tipo_de_examenUpdateWithoutResultadoInput, tipo_de_examenUncheckedUpdateWithoutResultadoInput>
  }

  export type tipo_de_examenUpdateWithoutResultadoInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Indicaciones?: StringFieldUpdateOperationsInput | string
  }

  export type tipo_de_examenUncheckedUpdateWithoutResultadoInput = {
    id_examen?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Indicaciones?: StringFieldUpdateOperationsInput | string
  }

  export type resultadoCreateManyPacienteInput = {
    id?: number
    Resultado_test: string
    valor_paga: number
    observaciones: string
    examen_id: number
  }

  export type resultadoUpdateWithoutPacienteInput = {
    Resultado_test?: StringFieldUpdateOperationsInput | string
    valor_paga?: IntFieldUpdateOperationsInput | number
    observaciones?: StringFieldUpdateOperationsInput | string
    tipo_de_examen?: tipo_de_examenUpdateOneRequiredWithoutResultadoNestedInput
  }

  export type resultadoUncheckedUpdateWithoutPacienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    Resultado_test?: StringFieldUpdateOperationsInput | string
    valor_paga?: IntFieldUpdateOperationsInput | number
    observaciones?: StringFieldUpdateOperationsInput | string
    examen_id?: IntFieldUpdateOperationsInput | number
  }

  export type resultadoUncheckedUpdateManyWithoutPacienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    Resultado_test?: StringFieldUpdateOperationsInput | string
    valor_paga?: IntFieldUpdateOperationsInput | number
    observaciones?: StringFieldUpdateOperationsInput | string
    examen_id?: IntFieldUpdateOperationsInput | number
  }

  export type resultadoCreateManyTipo_de_examenInput = {
    id?: number
    Resultado_test: string
    valor_paga: number
    observaciones: string
    paciente_id: number
  }

  export type resultadoUpdateWithoutTipo_de_examenInput = {
    Resultado_test?: StringFieldUpdateOperationsInput | string
    valor_paga?: IntFieldUpdateOperationsInput | number
    observaciones?: StringFieldUpdateOperationsInput | string
    paciente?: pacienteUpdateOneRequiredWithoutResultadoNestedInput
  }

  export type resultadoUncheckedUpdateWithoutTipo_de_examenInput = {
    id?: IntFieldUpdateOperationsInput | number
    Resultado_test?: StringFieldUpdateOperationsInput | string
    valor_paga?: IntFieldUpdateOperationsInput | number
    observaciones?: StringFieldUpdateOperationsInput | string
    paciente_id?: IntFieldUpdateOperationsInput | number
  }

  export type resultadoUncheckedUpdateManyWithoutTipo_de_examenInput = {
    id?: IntFieldUpdateOperationsInput | number
    Resultado_test?: StringFieldUpdateOperationsInput | string
    valor_paga?: IntFieldUpdateOperationsInput | number
    observaciones?: StringFieldUpdateOperationsInput | string
    paciente_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PacienteCountOutputTypeDefaultArgs instead
     */
    export type PacienteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PacienteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Tipo_de_examenCountOutputTypeDefaultArgs instead
     */
    export type Tipo_de_examenCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Tipo_de_examenCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use pacienteDefaultArgs instead
     */
    export type pacienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = pacienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use tipo_de_examenDefaultArgs instead
     */
    export type tipo_de_examenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = tipo_de_examenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use resultadoDefaultArgs instead
     */
    export type resultadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = resultadoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}